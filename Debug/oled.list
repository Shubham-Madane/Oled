
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000347c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a64  08003a64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a64  08003a64  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a64  08003a64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  2000000c  08003a78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08003a78  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8a8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7a  00000000  00000000  0002b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002e218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021e1  00000000  00000000  0002ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c645  00000000  00000000  00030dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3daf  00000000  00000000  0003d40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f11bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002abc  00000000  00000000  000f1210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800363c 	.word	0x0800363c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800363c 	.word	0x0800363c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fc34 	bl	8000a8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f815 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f893 	bl	8000350 <MX_GPIO_Init>
  MX_I2C3_Init();
 800022a:	f000 f851 	bl	80002d0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  //sprintf(buffer,"%d",CO_2);
  SSD1306_Init (); // initialize the display
 800022e:	f000 f921 	bl	8000474 <SSD1306_Init>


  SSD1306_DrawBitmap(0,0,ganesha,128,64,1);
 8000232:	2301      	movs	r3, #1
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	2340      	movs	r3, #64	; 0x40
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	4a03      	ldr	r2, [pc, #12]	; (800024c <main+0x34>)
 800023e:	2100      	movs	r1, #0
 8000240:	2000      	movs	r0, #0
 8000242:	f000 f8ae 	bl	80003a2 <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 8000246:	f000 f9d9 	bl	80005fc <SSD1306_UpdateScreen>
  //SSD1306_Clear ();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0x32>
 800024c:	08003654 	.word	0x08003654

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b094      	sub	sp, #80	; 0x50
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2238      	movs	r2, #56	; 0x38
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f003 f9e4 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f002 fa15 	bl	80026a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000282:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2340      	movs	r3, #64	; 0x40
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f002 fabb 	bl	800280c <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800029c:	f000 f87c 	bl	8000398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	2301      	movs	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f002 fdbf 	bl	8002e3c <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002c4:	f000 f868 	bl	8000398 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3750      	adds	r7, #80	; 0x50
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_I2C3_Init+0x74>)
 80002d6:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <MX_I2C3_Init+0x78>)
 80002d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 80002da:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <MX_I2C3_Init+0x74>)
 80002dc:	4a1b      	ldr	r2, [pc, #108]	; (800034c <MX_I2C3_Init+0x7c>)
 80002de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_I2C3_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <MX_I2C3_Init+0x74>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_I2C3_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_I2C3_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_I2C3_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_I2C3_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_I2C3_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800030a:	480e      	ldr	r0, [pc, #56]	; (8000344 <MX_I2C3_Init+0x74>)
 800030c:	f000 ff34 	bl	8001178 <HAL_I2C_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000316:	f000 f83f 	bl	8000398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800031a:	2100      	movs	r1, #0
 800031c:	4809      	ldr	r0, [pc, #36]	; (8000344 <MX_I2C3_Init+0x74>)
 800031e:	f002 f929 	bl	8002574 <HAL_I2CEx_ConfigAnalogFilter>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000328:	f000 f836 	bl	8000398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800032c:	2100      	movs	r1, #0
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_I2C3_Init+0x74>)
 8000330:	f002 f96b 	bl	800260a <HAL_I2CEx_ConfigDigitalFilter>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800033a:	f000 f82d 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000028 	.word	0x20000028
 8000348:	40007800 	.word	0x40007800
 800034c:	0010061a 	.word	0x0010061a

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_GPIO_Init+0x44>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <MX_GPIO_Init+0x44>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_GPIO_Init+0x44>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_GPIO_Init+0x44>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <MX_GPIO_Init+0x44>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_GPIO_Init+0x44>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <Error_Handler+0x8>

080003a2 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b086      	sub	sp, #24
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	60ba      	str	r2, [r7, #8]
 80003aa:	461a      	mov	r2, r3
 80003ac:	4603      	mov	r3, r0
 80003ae:	81fb      	strh	r3, [r7, #14]
 80003b0:	460b      	mov	r3, r1
 80003b2:	81bb      	strh	r3, [r7, #12]
 80003b4:	4613      	mov	r3, r2
 80003b6:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80003b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003bc:	3307      	adds	r3, #7
 80003be:	2b00      	cmp	r3, #0
 80003c0:	da00      	bge.n	80003c4 <SSD1306_DrawBitmap+0x22>
 80003c2:	3307      	adds	r3, #7
 80003c4:	10db      	asrs	r3, r3, #3
 80003c6:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	82bb      	strh	r3, [r7, #20]
 80003d0:	e044      	b.n	800045c <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80003d2:	2300      	movs	r3, #0
 80003d4:	827b      	strh	r3, [r7, #18]
 80003d6:	e02f      	b.n	8000438 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80003d8:	8a7b      	ldrh	r3, [r7, #18]
 80003da:	f003 0307 	and.w	r3, r3, #7
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80003e2:	7dfb      	ldrb	r3, [r7, #23]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	75fb      	strb	r3, [r7, #23]
 80003e8:	e012      	b.n	8000410 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80003ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80003ee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80003f2:	fb03 f202 	mul.w	r2, r3, r2
 80003f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	da00      	bge.n	8000400 <SSD1306_DrawBitmap+0x5e>
 80003fe:	3307      	adds	r3, #7
 8000400:	10db      	asrs	r3, r3, #3
 8000402:	b21b      	sxth	r3, r3
 8000404:	4413      	add	r3, r2
 8000406:	461a      	mov	r2, r3
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	4413      	add	r3, r2
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000414:	2b00      	cmp	r3, #0
 8000416:	da09      	bge.n	800042c <SSD1306_DrawBitmap+0x8a>
 8000418:	89fa      	ldrh	r2, [r7, #14]
 800041a:	8a7b      	ldrh	r3, [r7, #18]
 800041c:	4413      	add	r3, r2
 800041e:	b29b      	uxth	r3, r3
 8000420:	89b9      	ldrh	r1, [r7, #12]
 8000422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000424:	b2d2      	uxtb	r2, r2
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f92e 	bl	8000688 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800042c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000430:	b29b      	uxth	r3, r3
 8000432:	3301      	adds	r3, #1
 8000434:	b29b      	uxth	r3, r3
 8000436:	827b      	strh	r3, [r7, #18]
 8000438:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800043c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000440:	429a      	cmp	r2, r3
 8000442:	dbc9      	blt.n	80003d8 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000444:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000448:	b29b      	uxth	r3, r3
 800044a:	3301      	adds	r3, #1
 800044c:	b29b      	uxth	r3, r3
 800044e:	82bb      	strh	r3, [r7, #20]
 8000450:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000454:	b29b      	uxth	r3, r3
 8000456:	3301      	adds	r3, #1
 8000458:	b29b      	uxth	r3, r3
 800045a:	81bb      	strh	r3, [r7, #12]
 800045c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000460:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000464:	429a      	cmp	r2, r3
 8000466:	dbb4      	blt.n	80003d2 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800047a:	f000 f965 	bl	8000748 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800047e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000482:	2201      	movs	r2, #1
 8000484:	2178      	movs	r1, #120	; 0x78
 8000486:	485b      	ldr	r0, [pc, #364]	; (80005f4 <SSD1306_Init+0x180>)
 8000488:	f000 fffa 	bl	8001480 <HAL_I2C_IsDeviceReady>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000492:	2300      	movs	r3, #0
 8000494:	e0a9      	b.n	80005ea <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000496:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800049a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800049c:	e002      	b.n	80004a4 <SSD1306_Init+0x30>
		p--;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d1f9      	bne.n	800049e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80004aa:	22ae      	movs	r2, #174	; 0xae
 80004ac:	2100      	movs	r1, #0
 80004ae:	2078      	movs	r0, #120	; 0x78
 80004b0:	f000 f9c6 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80004b4:	2220      	movs	r2, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	2078      	movs	r0, #120	; 0x78
 80004ba:	f000 f9c1 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80004be:	2210      	movs	r2, #16
 80004c0:	2100      	movs	r1, #0
 80004c2:	2078      	movs	r0, #120	; 0x78
 80004c4:	f000 f9bc 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80004c8:	22b0      	movs	r2, #176	; 0xb0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2078      	movs	r0, #120	; 0x78
 80004ce:	f000 f9b7 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80004d2:	22c8      	movs	r2, #200	; 0xc8
 80004d4:	2100      	movs	r1, #0
 80004d6:	2078      	movs	r0, #120	; 0x78
 80004d8:	f000 f9b2 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	2078      	movs	r0, #120	; 0x78
 80004e2:	f000 f9ad 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80004e6:	2210      	movs	r2, #16
 80004e8:	2100      	movs	r1, #0
 80004ea:	2078      	movs	r0, #120	; 0x78
 80004ec:	f000 f9a8 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80004f0:	2240      	movs	r2, #64	; 0x40
 80004f2:	2100      	movs	r1, #0
 80004f4:	2078      	movs	r0, #120	; 0x78
 80004f6:	f000 f9a3 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80004fa:	2281      	movs	r2, #129	; 0x81
 80004fc:	2100      	movs	r1, #0
 80004fe:	2078      	movs	r0, #120	; 0x78
 8000500:	f000 f99e 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000504:	22ff      	movs	r2, #255	; 0xff
 8000506:	2100      	movs	r1, #0
 8000508:	2078      	movs	r0, #120	; 0x78
 800050a:	f000 f999 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800050e:	22a1      	movs	r2, #161	; 0xa1
 8000510:	2100      	movs	r1, #0
 8000512:	2078      	movs	r0, #120	; 0x78
 8000514:	f000 f994 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000518:	22a6      	movs	r2, #166	; 0xa6
 800051a:	2100      	movs	r1, #0
 800051c:	2078      	movs	r0, #120	; 0x78
 800051e:	f000 f98f 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000522:	22a8      	movs	r2, #168	; 0xa8
 8000524:	2100      	movs	r1, #0
 8000526:	2078      	movs	r0, #120	; 0x78
 8000528:	f000 f98a 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800052c:	223f      	movs	r2, #63	; 0x3f
 800052e:	2100      	movs	r1, #0
 8000530:	2078      	movs	r0, #120	; 0x78
 8000532:	f000 f985 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000536:	22a4      	movs	r2, #164	; 0xa4
 8000538:	2100      	movs	r1, #0
 800053a:	2078      	movs	r0, #120	; 0x78
 800053c:	f000 f980 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000540:	22d3      	movs	r2, #211	; 0xd3
 8000542:	2100      	movs	r1, #0
 8000544:	2078      	movs	r0, #120	; 0x78
 8000546:	f000 f97b 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2078      	movs	r0, #120	; 0x78
 8000550:	f000 f976 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000554:	22d5      	movs	r2, #213	; 0xd5
 8000556:	2100      	movs	r1, #0
 8000558:	2078      	movs	r0, #120	; 0x78
 800055a:	f000 f971 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800055e:	22f0      	movs	r2, #240	; 0xf0
 8000560:	2100      	movs	r1, #0
 8000562:	2078      	movs	r0, #120	; 0x78
 8000564:	f000 f96c 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000568:	22d9      	movs	r2, #217	; 0xd9
 800056a:	2100      	movs	r1, #0
 800056c:	2078      	movs	r0, #120	; 0x78
 800056e:	f000 f967 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000572:	2222      	movs	r2, #34	; 0x22
 8000574:	2100      	movs	r1, #0
 8000576:	2078      	movs	r0, #120	; 0x78
 8000578:	f000 f962 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800057c:	22da      	movs	r2, #218	; 0xda
 800057e:	2100      	movs	r1, #0
 8000580:	2078      	movs	r0, #120	; 0x78
 8000582:	f000 f95d 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000586:	2212      	movs	r2, #18
 8000588:	2100      	movs	r1, #0
 800058a:	2078      	movs	r0, #120	; 0x78
 800058c:	f000 f958 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000590:	22db      	movs	r2, #219	; 0xdb
 8000592:	2100      	movs	r1, #0
 8000594:	2078      	movs	r0, #120	; 0x78
 8000596:	f000 f953 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800059a:	2220      	movs	r2, #32
 800059c:	2100      	movs	r1, #0
 800059e:	2078      	movs	r0, #120	; 0x78
 80005a0:	f000 f94e 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80005a4:	228d      	movs	r2, #141	; 0x8d
 80005a6:	2100      	movs	r1, #0
 80005a8:	2078      	movs	r0, #120	; 0x78
 80005aa:	f000 f949 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80005ae:	2214      	movs	r2, #20
 80005b0:	2100      	movs	r1, #0
 80005b2:	2078      	movs	r0, #120	; 0x78
 80005b4:	f000 f944 	bl	8000840 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80005b8:	22af      	movs	r2, #175	; 0xaf
 80005ba:	2100      	movs	r1, #0
 80005bc:	2078      	movs	r0, #120	; 0x78
 80005be:	f000 f93f 	bl	8000840 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80005c2:	222e      	movs	r2, #46	; 0x2e
 80005c4:	2100      	movs	r1, #0
 80005c6:	2078      	movs	r0, #120	; 0x78
 80005c8:	f000 f93a 	bl	8000840 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 f843 	bl	8000658 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80005d2:	f000 f813 	bl	80005fc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <SSD1306_Init+0x184>)
 80005d8:	2200      	movs	r2, #0
 80005da:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <SSD1306_Init+0x184>)
 80005de:	2200      	movs	r2, #0
 80005e0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SSD1306_Init+0x184>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80005e8:	2301      	movs	r3, #1
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000028 	.word	0x20000028
 80005f8:	20000474 	.word	0x20000474

080005fc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	e01d      	b.n	8000644 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3b50      	subs	r3, #80	; 0x50
 800060c:	b2db      	uxtb	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	2078      	movs	r0, #120	; 0x78
 8000614:	f000 f914 	bl	8000840 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	2078      	movs	r0, #120	; 0x78
 800061e:	f000 f90f 	bl	8000840 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000622:	2210      	movs	r2, #16
 8000624:	2100      	movs	r1, #0
 8000626:	2078      	movs	r0, #120	; 0x78
 8000628:	f000 f90a 	bl	8000840 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	01db      	lsls	r3, r3, #7
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <SSD1306_UpdateScreen+0x58>)
 8000632:	441a      	add	r2, r3
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	2078      	movs	r0, #120	; 0x78
 800063a:	f000 f89b 	bl	8000774 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	3301      	adds	r3, #1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b07      	cmp	r3, #7
 8000648:	d9de      	bls.n	8000608 <SSD1306_UpdateScreen+0xc>
	}
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000074 	.word	0x20000074

08000658 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <SSD1306_Fill+0x14>
 8000668:	2300      	movs	r3, #0
 800066a:	e000      	b.n	800066e <SSD1306_Fill+0x16>
 800066c:	23ff      	movs	r3, #255	; 0xff
 800066e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000672:	4619      	mov	r1, r3
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <SSD1306_Fill+0x2c>)
 8000676:	f002 ffd9 	bl	800362c <memset>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000074 	.word	0x20000074

08000688 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	460b      	mov	r3, r1
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	4613      	mov	r3, r2
 8000698:	70fb      	strb	r3, [r7, #3]
	if (
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	2b7f      	cmp	r3, #127	; 0x7f
 800069e:	d848      	bhi.n	8000732 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80006a0:	88bb      	ldrh	r3, [r7, #4]
 80006a2:	2b3f      	cmp	r3, #63	; 0x3f
 80006a4:	d845      	bhi.n	8000732 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <SSD1306_DrawPixel+0xb8>)
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf0c      	ite	eq
 80006b4:	2301      	moveq	r3, #1
 80006b6:	2300      	movne	r3, #0
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d11a      	bne.n	80006f8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80006c2:	88fa      	ldrh	r2, [r7, #6]
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	08db      	lsrs	r3, r3, #3
 80006c8:	b298      	uxth	r0, r3
 80006ca:	4603      	mov	r3, r0
 80006cc:	01db      	lsls	r3, r3, #7
 80006ce:	4413      	add	r3, r2
 80006d0:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <SSD1306_DrawPixel+0xbc>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	b25a      	sxtb	r2, r3
 80006d6:	88bb      	ldrh	r3, [r7, #4]
 80006d8:	f003 0307 	and.w	r3, r3, #7
 80006dc:	2101      	movs	r1, #1
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b259      	sxtb	r1, r3
 80006e8:	88fa      	ldrh	r2, [r7, #6]
 80006ea:	4603      	mov	r3, r0
 80006ec:	01db      	lsls	r3, r3, #7
 80006ee:	4413      	add	r3, r2
 80006f0:	b2c9      	uxtb	r1, r1
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <SSD1306_DrawPixel+0xbc>)
 80006f4:	54d1      	strb	r1, [r2, r3]
 80006f6:	e01d      	b.n	8000734 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80006f8:	88fa      	ldrh	r2, [r7, #6]
 80006fa:	88bb      	ldrh	r3, [r7, #4]
 80006fc:	08db      	lsrs	r3, r3, #3
 80006fe:	b298      	uxth	r0, r3
 8000700:	4603      	mov	r3, r0
 8000702:	01db      	lsls	r3, r3, #7
 8000704:	4413      	add	r3, r2
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <SSD1306_DrawPixel+0xbc>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	b25a      	sxtb	r2, r3
 800070c:	88bb      	ldrh	r3, [r7, #4]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f303 	lsl.w	r3, r1, r3
 8000718:	b25b      	sxtb	r3, r3
 800071a:	43db      	mvns	r3, r3
 800071c:	b25b      	sxtb	r3, r3
 800071e:	4013      	ands	r3, r2
 8000720:	b259      	sxtb	r1, r3
 8000722:	88fa      	ldrh	r2, [r7, #6]
 8000724:	4603      	mov	r3, r0
 8000726:	01db      	lsls	r3, r3, #7
 8000728:	4413      	add	r3, r2
 800072a:	b2c9      	uxtb	r1, r1
 800072c:	4a05      	ldr	r2, [pc, #20]	; (8000744 <SSD1306_DrawPixel+0xbc>)
 800072e:	54d1      	strb	r1, [r2, r3]
 8000730:	e000      	b.n	8000734 <SSD1306_DrawPixel+0xac>
		return;
 8000732:	bf00      	nop
	}
}
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000474 	.word	0x20000474
 8000744:	20000074 	.word	0x20000074

08000748 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <ssd1306_I2C_Init+0x28>)
 8000750:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000752:	e002      	b.n	800075a <ssd1306_I2C_Init+0x12>
		p--;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
	while(p>0)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f9      	bne.n	8000754 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	0003d090 	.word	0x0003d090

08000774 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b0c7      	sub	sp, #284	; 0x11c
 8000778:	af02      	add	r7, sp, #8
 800077a:	4604      	mov	r4, r0
 800077c:	4608      	mov	r0, r1
 800077e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000782:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000786:	600a      	str	r2, [r1, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800078e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000792:	4622      	mov	r2, r4
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800079a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800079e:	4602      	mov	r2, r0
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80007aa:	460a      	mov	r2, r1
 80007ac:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80007ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80007b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007ba:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80007c8:	e015      	b.n	80007f6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80007ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007d2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80007d6:	6812      	ldr	r2, [r2, #0]
 80007d8:	441a      	add	r2, r3
 80007da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007de:	3301      	adds	r3, #1
 80007e0:	7811      	ldrb	r1, [r2, #0]
 80007e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007e6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80007ea:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80007ec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007f0:	3301      	adds	r3, #1
 80007f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80007f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000800:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000804:	8812      	ldrh	r2, [r2, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d8df      	bhi.n	80007ca <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 800080a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800080e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b299      	uxth	r1, r3
 8000816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800081a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b29b      	uxth	r3, r3
 8000824:	f107 020c 	add.w	r2, r7, #12
 8000828:	200a      	movs	r0, #10
 800082a:	9000      	str	r0, [sp, #0]
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <ssd1306_I2C_WriteMulti+0xc8>)
 800082e:	f000 fd33 	bl	8001298 <HAL_I2C_Master_Transmit>
}
 8000832:	bf00      	nop
 8000834:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000838:	46bd      	mov	sp, r7
 800083a:	bd90      	pop	{r4, r7, pc}
 800083c:	20000028 	.word	0x20000028

08000840 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	460b      	mov	r3, r1
 800084c:	71bb      	strb	r3, [r7, #6]
 800084e:	4613      	mov	r3, r2
 8000850:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000856:	797b      	ldrb	r3, [r7, #5]
 8000858:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	b299      	uxth	r1, r3
 800085e:	f107 020c 	add.w	r2, r7, #12
 8000862:	230a      	movs	r3, #10
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <ssd1306_I2C_Write+0x38>)
 800086a:	f000 fd15 	bl	8001298 <HAL_I2C_Master_Transmit>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000028 	.word	0x20000028

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	; 0x60
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	; 0x58
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008b2:	f001 ff9b 	bl	80027ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09a      	sub	sp, #104	; 0x68
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	2244      	movs	r2, #68	; 0x44
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fea1 	bl	800362c <memset>
  if(hi2c->Instance==I2C3)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a27      	ldr	r2, [pc, #156]	; (800098c <HAL_I2C_MspInit+0xc8>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d147      	bne.n	8000984 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80008f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fc7e 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800090e:	f7ff fd43 	bl	8000398 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_I2C_MspInit+0xcc>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <HAL_I2C_MspInit+0xcc>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_I2C_MspInit+0xcc>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800092e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000930:	2312      	movs	r3, #18
 8000932:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800093c:	2308      	movs	r3, #8
 800093e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000944:	4619      	mov	r1, r3
 8000946:	4813      	ldr	r0, [pc, #76]	; (8000994 <HAL_I2C_MspInit+0xd0>)
 8000948:	f000 fa94 	bl	8000e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_I2C_MspInit+0xcc>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_I2C_MspInit+0xcc>)
 8000952:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000956:	6593      	str	r3, [r2, #88]	; 0x58
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_I2C_MspInit+0xcc>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	205c      	movs	r0, #92	; 0x5c
 800096a:	f000 f9da 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800096e:	205c      	movs	r0, #92	; 0x5c
 8000970:	f000 f9f1 	bl	8000d56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	205d      	movs	r0, #93	; 0x5d
 800097a:	f000 f9d2 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800097e:	205d      	movs	r0, #93	; 0x5d
 8000980:	f000 f9e9 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3768      	adds	r7, #104	; 0x68
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40007800 	.word	0x40007800
 8000990:	40021000 	.word	0x40021000
 8000994:	48000800 	.word	0x48000800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f8a4 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <I2C3_EV_IRQHandler+0x10>)
 80009f2:	f000 fe4c 	bl	800168e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000028 	.word	0x20000028

08000a00 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <I2C3_ER_IRQHandler+0x10>)
 8000a06:	f000 fe5c 	bl	80016c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000028 	.word	0x20000028

08000a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a62:	f7ff ffd7 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f002 fdbd 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fbd5 	bl	8000218 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a7c:	08003a6c 	.word	0x08003a6c
  ldr r2, =_sbss
 8000a80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a84:	20000480 	.word	0x20000480

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>

08000a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f939 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f80e 	bl	8000abc <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aac:	f7ff fee6 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_InitTick+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d022      	beq.n	8000b16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_InitTick+0x6c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_InitTick+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f944 	bl	8000d72 <HAL_SYSTICK_Config>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10f      	bne.n	8000b10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d809      	bhi.n	8000b0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	2200      	movs	r2, #0
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295
 8000afe:	f000 f910 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_InitTick+0x70>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e004      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	2000047c 	.word	0x2000047c
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	2000047c 	.word	0x2000047c

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff40 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff33 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa4 	bl	8000cc8 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d00d      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2204      	movs	r2, #4
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e047      	b.n	8000e4e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 020e 	bic.w	r2, r2, #14
 8000dcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0201 	bic.w	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 021f 	and.w	r2, r3, #31
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00c      	beq.n	8000e2e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	4798      	blx	r3
    }
  }
  return status;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e66:	b2db      	uxtb	r3, r3
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e82:	e15a      	b.n	800113a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 814c 	beq.w	8001134 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d005      	beq.n	8000eb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d130      	bne.n	8000f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eea:	2201      	movs	r2, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	f003 0201 	and.w	r2, r3, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d017      	beq.n	8000f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d123      	bne.n	8000fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	6939      	ldr	r1, [r7, #16]
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0203 	and.w	r2, r3, #3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80a6 	beq.w	8001134 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe8:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <HAL_GPIO_Init+0x2e4>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	4a5a      	ldr	r2, [pc, #360]	; (8001158 <HAL_GPIO_Init+0x2e4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff4:	4b58      	ldr	r3, [pc, #352]	; (8001158 <HAL_GPIO_Init+0x2e4>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001000:	4a56      	ldr	r2, [pc, #344]	; (800115c <HAL_GPIO_Init+0x2e8>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800102a:	d01f      	beq.n	800106c <HAL_GPIO_Init+0x1f8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x2ec>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d019      	beq.n	8001068 <HAL_GPIO_Init+0x1f4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x2f0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d013      	beq.n	8001064 <HAL_GPIO_Init+0x1f0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x2f4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d00d      	beq.n	8001060 <HAL_GPIO_Init+0x1ec>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_GPIO_Init+0x2f8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d007      	beq.n	800105c <HAL_GPIO_Init+0x1e8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a48      	ldr	r2, [pc, #288]	; (8001170 <HAL_GPIO_Init+0x2fc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d101      	bne.n	8001058 <HAL_GPIO_Init+0x1e4>
 8001054:	2305      	movs	r3, #5
 8001056:	e00a      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001058:	2306      	movs	r3, #6
 800105a:	e008      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 800105c:	2304      	movs	r3, #4
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001060:	2303      	movs	r3, #3
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 800106c:	2300      	movs	r3, #0
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107e:	4937      	ldr	r1, [pc, #220]	; (800115c <HAL_GPIO_Init+0x2e8>)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_GPIO_Init+0x300>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b0:	4a30      	ldr	r2, [pc, #192]	; (8001174 <HAL_GPIO_Init+0x300>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_GPIO_Init+0x300>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010da:	4a26      	ldr	r2, [pc, #152]	; (8001174 <HAL_GPIO_Init+0x300>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_GPIO_Init+0x300>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <HAL_GPIO_Init+0x300>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_GPIO_Init+0x300>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <HAL_GPIO_Init+0x300>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	f47f ae9d 	bne.w	8000e84 <HAL_GPIO_Init+0x10>
  }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	48000400 	.word	0x48000400
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48001000 	.word	0x48001000
 8001170:	48001400 	.word	0x48001400
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e081      	b.n	800128e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fb90 	bl	80008c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2224      	movs	r2, #36	; 0x24
 80011a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d107      	bne.n	80011f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	e006      	b.n	8001200 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d104      	bne.n	8001212 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69d9      	ldr	r1, [r3, #28]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1a      	ldr	r2, [r3, #32]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2220      	movs	r2, #32
 800127a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af02      	add	r7, sp, #8
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	461a      	mov	r2, r3
 80012a4:	460b      	mov	r3, r1
 80012a6:	817b      	strh	r3, [r7, #10]
 80012a8:	4613      	mov	r3, r2
 80012aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b20      	cmp	r3, #32
 80012b6:	f040 80da 	bne.w	800146e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_I2C_Master_Transmit+0x30>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e0d3      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1d8>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012d0:	f7ff fc40 	bl	8000b54 <HAL_GetTick>
 80012d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2319      	movs	r3, #25
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 ff0d 	bl	8002102 <I2C_WaitOnFlagUntilTimeout>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0be      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2221      	movs	r2, #33	; 0x21
 80012f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2210      	movs	r2, #16
 80012fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	893a      	ldrh	r2, [r7, #8]
 8001312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131e:	b29b      	uxth	r3, r3
 8001320:	2bff      	cmp	r3, #255	; 0xff
 8001322:	d90e      	bls.n	8001342 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	22ff      	movs	r2, #255	; 0xff
 8001328:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132e:	b2da      	uxtb	r2, r3
 8001330:	8979      	ldrh	r1, [r7, #10]
 8001332:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_I2C_Master_Transmit+0x1e0>)
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f001 f88a 	bl	8002454 <I2C_TransferConfig>
 8001340:	e06c      	b.n	800141c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001346:	b29a      	uxth	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001350:	b2da      	uxtb	r2, r3
 8001352:	8979      	ldrh	r1, [r7, #10]
 8001354:	4b48      	ldr	r3, [pc, #288]	; (8001478 <HAL_I2C_Master_Transmit+0x1e0>)
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f001 f879 	bl	8002454 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001362:	e05b      	b.n	800141c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	6a39      	ldr	r1, [r7, #32]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 ff0a 	bl	8002182 <I2C_WaitOnTXISFlagUntilTimeout>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e07b      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001392:	b29b      	uxth	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d034      	beq.n	800141c <HAL_I2C_Master_Transmit+0x184>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d130      	bne.n	800141c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	2200      	movs	r2, #0
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 fe9c 	bl	8002102 <I2C_WaitOnFlagUntilTimeout>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e04d      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2bff      	cmp	r3, #255	; 0xff
 80013dc:	d90e      	bls.n	80013fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	2300      	movs	r3, #0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f001 f82d 	bl	8002454 <I2C_TransferConfig>
 80013fa:	e00f      	b.n	800141c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001400:	b29a      	uxth	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140a:	b2da      	uxtb	r2, r3
 800140c:	8979      	ldrh	r1, [r7, #10]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f001 f81c 	bl	8002454 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001420:	b29b      	uxth	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d19e      	bne.n	8001364 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	6a39      	ldr	r1, [r7, #32]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 fee9 	bl	8002202 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e01a      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2220      	movs	r2, #32
 8001440:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_I2C_Master_Transmit+0x1e4>)
 800144e:	400b      	ands	r3, r1
 8001450:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2220      	movs	r2, #32
 8001456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800146e:	2302      	movs	r3, #2
  }
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	80002000 	.word	0x80002000
 800147c:	fe00e800 	.word	0xfe00e800

08001480 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	460b      	mov	r3, r1
 800148e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b20      	cmp	r3, #32
 800149e:	f040 80f1 	bne.w	8001684 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b0:	d101      	bne.n	80014b6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80014b2:	2302      	movs	r3, #2
 80014b4:	e0e7      	b.n	8001686 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_I2C_IsDeviceReady+0x44>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e0e0      	b.n	8001686 <HAL_I2C_IsDeviceReady+0x206>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2224      	movs	r2, #36	; 0x24
 80014d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d107      	bne.n	80014f2 <HAL_I2C_IsDeviceReady+0x72>
 80014e2:	897b      	ldrh	r3, [r7, #10]
 80014e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f0:	e004      	b.n	80014fc <HAL_I2C_IsDeviceReady+0x7c>
 80014f2:	897b      	ldrh	r3, [r7, #10]
 80014f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014f8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fb27 	bl	8000b54 <HAL_GetTick>
 8001506:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b20      	cmp	r3, #32
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b10      	cmp	r3, #16
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001534:	e034      	b.n	80015a0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d01a      	beq.n	8001574 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800153e:	f7ff fb09 	bl	8000b54 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d302      	bcc.n	8001554 <HAL_I2C_IsDeviceReady+0xd4>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f043 0220 	orr.w	r2, r3, #32
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e088      	b.n	8001686 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b20      	cmp	r3, #32
 8001580:	bf0c      	ite	eq
 8001582:	2301      	moveq	r3, #1
 8001584:	2300      	movne	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	2b10      	cmp	r3, #16
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015a0:	7ffb      	ldrb	r3, [r7, #31]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_I2C_IsDeviceReady+0x12c>
 80015a6:	7fbb      	ldrb	r3, [r7, #30]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0c4      	beq.n	8001536 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b10      	cmp	r3, #16
 80015b8:	d01a      	beq.n	80015f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	2120      	movs	r1, #32
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 fd9c 	bl	8002102 <I2C_WaitOnFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e058      	b.n	8001686 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2220      	movs	r2, #32
 80015da:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2220      	movs	r2, #32
 80015e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e04a      	b.n	8001686 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	2120      	movs	r1, #32
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fd81 	bl	8002102 <I2C_WaitOnFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e03d      	b.n	8001686 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2210      	movs	r2, #16
 8001610:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2220      	movs	r2, #32
 8001618:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	d118      	bne.n	8001654 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001630:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2200      	movs	r2, #0
 800163a:	2120      	movs	r1, #32
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 fd60 	bl	8002102 <I2C_WaitOnFlagUntilTimeout>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e01c      	b.n	8001686 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2220      	movs	r2, #32
 8001652:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	f63f af3b 	bhi.w	80014da <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	f043 0220 	orr.w	r2, r3, #32
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001684:	2302      	movs	r3, #2
  }
}
 8001686:	4618      	mov	r0, r3
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	68f9      	ldr	r1, [r7, #12]
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
  }
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d010      	beq.n	8001708 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	09db      	lsrs	r3, r3, #7
 80016ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001706:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	0a9b      	lsrs	r3, r3, #10
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d010      	beq.n	8001736 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	09db      	lsrs	r3, r3, #7
 8001718:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00a      	beq.n	8001736 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f043 0208 	orr.w	r2, r3, #8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001734:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	0a5b      	lsrs	r3, r3, #9
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d010      	beq.n	8001764 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	09db      	lsrs	r3, r3, #7
 8001746:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00a      	beq.n	8001764 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f043 0202 	orr.w	r2, r3, #2
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f003 030b 	and.w	r3, r3, #11
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fb8a 	bl	8001e90 <I2C_ITError>
  }
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
 80017b8:	4613      	mov	r3, r2
 80017ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <I2C_Slave_ISR_IT+0x24>
 8001824:	2302      	movs	r3, #2
 8001826:	e0ec      	b.n	8001a02 <I2C_Slave_ISR_IT+0x1fe>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001848:	6939      	ldr	r1, [r7, #16]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f9c0 	bl	8001bd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d04d      	beq.n	80018f8 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001864:	2b00      	cmp	r3, #0
 8001866:	d047      	beq.n	80018f8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d128      	bne.n	80018c4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b28      	cmp	r3, #40	; 0x28
 800187c:	d108      	bne.n	8001890 <I2C_Slave_ISR_IT+0x8c>
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001884:	d104      	bne.n	8001890 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001886:	6939      	ldr	r1, [r7, #16]
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 faab 	bl	8001de4 <I2C_ITListenCplt>
 800188e:	e032      	b.n	80018f6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b29      	cmp	r3, #41	; 0x29
 800189a:	d10e      	bne.n	80018ba <I2C_Slave_ISR_IT+0xb6>
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018a2:	d00a      	beq.n	80018ba <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2210      	movs	r2, #16
 80018aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 fbe6 	bl	800207e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f92d 	bl	8001b12 <I2C_ITSlaveSeqCplt>
 80018b8:	e01d      	b.n	80018f6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2210      	movs	r2, #16
 80018c0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80018c2:	e096      	b.n	80019f2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2210      	movs	r2, #16
 80018ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	f043 0204 	orr.w	r2, r3, #4
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <I2C_Slave_ISR_IT+0xe4>
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	f040 8085 	bne.w	80019f2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	4619      	mov	r1, r3
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 face 	bl	8001e90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80018f4:	e07d      	b.n	80019f2 <I2C_Slave_ISR_IT+0x1ee>
 80018f6:	e07c      	b.n	80019f2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d030      	beq.n	8001966 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02a      	beq.n	8001966 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d018      	beq.n	800194c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	3b01      	subs	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001950:	b29b      	uxth	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d14f      	bne.n	80019f6 <I2C_Slave_ISR_IT+0x1f2>
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800195c:	d04b      	beq.n	80019f6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f8d7 	bl	8001b12 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001964:	e047      	b.n	80019f6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00a      	beq.n	8001988 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800197e:	6939      	ldr	r1, [r7, #16]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f842 	bl	8001a0a <I2C_ITAddrCplt>
 8001986:	e037      	b.n	80019f8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d031      	beq.n	80019f8 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800199c:	2b00      	cmp	r3, #0
 800199e:	d02b      	beq.n	80019f8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d018      	beq.n	80019dc <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28
 80019da:	e00d      	b.n	80019f8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e2:	d002      	beq.n	80019ea <I2C_Slave_ISR_IT+0x1e6>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f891 	bl	8001b12 <I2C_ITSlaveSeqCplt>
 80019f0:	e002      	b.n	80019f8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80019f2:	bf00      	nop
 80019f4:	e000      	b.n	80019f8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80019f6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001a20:	2b28      	cmp	r3, #40	; 0x28
 8001a22:	d16a      	bne.n	8001afa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	0c1b      	lsrs	r3, r3, #16
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a42:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a50:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a5e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d138      	bne.n	8001ada <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a68:	897b      	ldrh	r3, [r7, #10]
 8001a6a:	09db      	lsrs	r3, r3, #7
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	89bb      	ldrh	r3, [r7, #12]
 8001a70:	4053      	eors	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f003 0306 	and.w	r3, r3, #6
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d11c      	bne.n	8001ab6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d13b      	bne.n	8001b0a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001aa8:	89ba      	ldrh	r2, [r7, #12]
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fe7c 	bl	80017ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ab4:	e029      	b.n	8001b0a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ab6:	893b      	ldrh	r3, [r7, #8]
 8001ab8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fcfa 	bl	80024b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001acc:	89ba      	ldrh	r2, [r7, #12]
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fe6a 	bl	80017ac <HAL_I2C_AddrCallback>
}
 8001ad8:	e017      	b.n	8001b0a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fcea 	bl	80024b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001aec:	89ba      	ldrh	r2, [r7, #12]
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fe5a 	bl	80017ac <HAL_I2C_AddrCallback>
}
 8001af8:	e007      	b.n	8001b0a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2208      	movs	r2, #8
 8001b00:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	0b9b      	lsrs	r3, r3, #14
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d008      	beq.n	8001b48 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e00d      	b.n	8001b64 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	0bdb      	lsrs	r3, r3, #15
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b62:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b29      	cmp	r3, #41	; 0x29
 8001b6e:	d112      	bne.n	8001b96 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2228      	movs	r2, #40	; 0x28
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2221      	movs	r2, #33	; 0x21
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b7e:	2101      	movs	r1, #1
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fc99 	bl	80024b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fdf8 	bl	8001784 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b94:	e017      	b.n	8001bc6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8001ba0:	d111      	bne.n	8001bc6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2228      	movs	r2, #40	; 0x28
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2222      	movs	r2, #34	; 0x22
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fc80 	bl	80024b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fde9 	bl	8001798 <HAL_I2C_SlaveRxCpltCallback>
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b21      	cmp	r3, #33	; 0x21
 8001bfa:	d002      	beq.n	8001c02 <I2C_ITSlaveCplt+0x32>
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b29      	cmp	r3, #41	; 0x29
 8001c00:	d108      	bne.n	8001c14 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001c02:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fc56 	bl	80024b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2221      	movs	r2, #33	; 0x21
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
 8001c12:	e00d      	b.n	8001c30 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2b22      	cmp	r3, #34	; 0x22
 8001c18:	d002      	beq.n	8001c20 <I2C_ITSlaveCplt+0x50>
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8001c1e:	d107      	bne.n	8001c30 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001c20:	f248 0102 	movw	r1, #32770	; 0x8002
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fc47 	bl	80024b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2222      	movs	r2, #34	; 0x22
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b64      	ldr	r3, [pc, #400]	; (8001ddc <I2C_ITSlaveCplt+0x20c>)
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fa14 	bl	800207e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	0b9b      	lsrs	r3, r3, #14
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d013      	beq.n	8001c8a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d020      	beq.n	8001cbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c88:	e018      	b.n	8001cbc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	0bdb      	lsrs	r3, r3, #15
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f043 0204 	orr.w	r2, r3, #4
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8a7 	bl	8001e90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b28      	cmp	r3, #40	; 0x28
 8001d4c:	d141      	bne.n	8001dd2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d4e:	6979      	ldr	r1, [r7, #20]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f847 	bl	8001de4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d56:	e03c      	b.n	8001dd2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d60:	d014      	beq.n	8001d8c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fed5 	bl	8001b12 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <I2C_ITSlaveCplt+0x210>)
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fd1f 	bl	80017c8 <HAL_I2C_ListenCpltCallback>
}
 8001d8a:	e022      	b.n	8001dd2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b22      	cmp	r3, #34	; 0x22
 8001d96:	d10e      	bne.n	8001db6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fcf2 	bl	8001798 <HAL_I2C_SlaveRxCpltCallback>
}
 8001db4:	e00d      	b.n	8001dd2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fcd9 	bl	8001784 <HAL_I2C_SlaveTxCpltCallback>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	fe00e800 	.word	0xfe00e800
 8001de0:	ffff0000 	.word	0xffff0000

08001de4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <I2C_ITListenCplt+0xa8>)
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d022      	beq.n	8001e62 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d012      	beq.n	8001e62 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f043 0204 	orr.w	r2, r3, #4
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e62:	f248 0103 	movw	r1, #32771	; 0x8003
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fb26 	bl	80024b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2210      	movs	r2, #16
 8001e72:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff fca3 	bl	80017c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a5d      	ldr	r2, [pc, #372]	; (8002024 <I2C_ITError+0x194>)
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	2b28      	cmp	r3, #40	; 0x28
 8001ec6:	d005      	beq.n	8001ed4 <I2C_ITError+0x44>
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b29      	cmp	r3, #41	; 0x29
 8001ecc:	d002      	beq.n	8001ed4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ed2:	d10b      	bne.n	8001eec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 faee 	bl	80024b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2228      	movs	r2, #40	; 0x28
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a50      	ldr	r2, [pc, #320]	; (8002028 <I2C_ITError+0x198>)
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eea:	e011      	b.n	8001f10 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001eec:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fae1 	bl	80024b8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b60      	cmp	r3, #96	; 0x60
 8001f00:	d003      	beq.n	8001f0a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d039      	beq.n	8001f92 <I2C_ITError+0x102>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d002      	beq.n	8001f2a <I2C_ITError+0x9a>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b21      	cmp	r3, #33	; 0x21
 8001f28:	d133      	bne.n	8001f92 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f38:	d107      	bne.n	8001f4a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ff82 	bl	8000e58 <HAL_DMA_GetState>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d017      	beq.n	8001f8a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	4a33      	ldr	r2, [pc, #204]	; (800202c <I2C_ITError+0x19c>)
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe ff0b 	bl	8000d8a <HAL_DMA_Abort_IT>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04d      	beq.n	8002016 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f84:	4610      	mov	r0, r2
 8001f86:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f88:	e045      	b.n	8002016 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f850 	bl	8002030 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f90:	e041      	b.n	8002016 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d039      	beq.n	800200e <I2C_ITError+0x17e>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b12      	cmp	r3, #18
 8001f9e:	d002      	beq.n	8001fa6 <I2C_ITError+0x116>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b22      	cmp	r3, #34	; 0x22
 8001fa4:	d133      	bne.n	800200e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb4:	d107      	bne.n	8001fc6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ff44 	bl	8000e58 <HAL_DMA_GetState>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d017      	beq.n	8002006 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <I2C_ITError+0x19c>)
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fecd 	bl	8000d8a <HAL_DMA_Abort_IT>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d011      	beq.n	800201a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002000:	4610      	mov	r0, r2
 8002002:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002004:	e009      	b.n	800201a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f812 	bl	8002030 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800200c:	e005      	b.n	800201a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f80e 	bl	8002030 <I2C_TreatErrorCallback>
  }
}
 8002014:	e002      	b.n	800201c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800201a:	bf00      	nop
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	ffff0000 	.word	0xffff0000
 8002028:	08001805 	.word	0x08001805
 800202c:	080020c7 	.word	0x080020c7

08002030 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b60      	cmp	r3, #96	; 0x60
 8002042:	d10e      	bne.n	8002062 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fbc8 	bl	80017f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002060:	e009      	b.n	8002076 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fbb3 	bl	80017dc <HAL_I2C_ErrorCallback>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d103      	bne.n	800209c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d007      	beq.n	80020ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	619a      	str	r2, [r3, #24]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e0:	2200      	movs	r2, #0
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	2200      	movs	r2, #0
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff ff9b 	bl	8002030 <I2C_TreatErrorCallback>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002112:	e022      	b.n	800215a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211a:	d01e      	beq.n	800215a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211c:	f7fe fd1a 	bl	8000b54 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d302      	bcc.n	8002132 <I2C_WaitOnFlagUntilTimeout+0x30>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d113      	bne.n	800215a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4013      	ands	r3, r2
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	429a      	cmp	r2, r3
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	429a      	cmp	r2, r3
 8002176:	d0cd      	beq.n	8002114 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800218e:	e02c      	b.n	80021ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f871 	bl	800227c <I2C_IsErrorOccurred>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e02a      	b.n	80021fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d01e      	beq.n	80021ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7fe fcd2 	bl	8000b54 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d302      	bcc.n	80021c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d113      	bne.n	80021ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e007      	b.n	80021fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d1cb      	bne.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220e:	e028      	b.n	8002262 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f831 	bl	800227c <I2C_IsErrorOccurred>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e026      	b.n	8002272 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002224:	f7fe fc96 	bl	8000b54 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	429a      	cmp	r2, r3
 8002232:	d302      	bcc.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d113      	bne.n	8002262 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f043 0220 	orr.w	r2, r3, #32
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e007      	b.n	8002272 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b20      	cmp	r3, #32
 800226e:	d1cf      	bne.n	8002210 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d075      	beq.n	8002394 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2210      	movs	r2, #16
 80022ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022b0:	e056      	b.n	8002360 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d052      	beq.n	8002360 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7fe fc4b 	bl	8000b54 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_IsErrorOccurred+0x54>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d147      	bne.n	8002360 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f2:	d12e      	bne.n	8002352 <I2C_IsErrorOccurred+0xd6>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022fa:	d02a      	beq.n	8002352 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d027      	beq.n	8002352 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002310:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002312:	f7fe fc1f 	bl	8000b54 <HAL_GetTick>
 8002316:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002318:	e01b      	b.n	8002352 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800231a:	f7fe fc1b 	bl	8000b54 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b19      	cmp	r3, #25
 8002326:	d914      	bls.n	8002352 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	f043 0220 	orr.w	r2, r3, #32
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b20      	cmp	r3, #32
 800235e:	d1dc      	bne.n	800231a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b20      	cmp	r3, #32
 800236c:	d003      	beq.n	8002376 <I2C_IsErrorOccurred+0xfa>
 800236e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002372:	2b00      	cmp	r3, #0
 8002374:	d09d      	beq.n	80022b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2220      	movs	r2, #32
 8002384:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	f043 0308 	orr.w	r3, r3, #8
 80023ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01c      	beq.n	8002444 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7ff fe37 	bl	800207e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <I2C_IsErrorOccurred+0x1d4>)
 800241c:	400b      	ands	r3, r1
 800241e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	431a      	orrs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002448:	4618      	mov	r0, r3
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	fe00e800 	.word	0xfe00e800

08002454 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	817b      	strh	r3, [r7, #10]
 8002462:	4613      	mov	r3, r2
 8002464:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002466:	897b      	ldrh	r3, [r7, #10]
 8002468:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800246c:	7a7b      	ldrb	r3, [r7, #9]
 800246e:	041b      	lsls	r3, r3, #16
 8002470:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002474:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	4313      	orrs	r3, r2
 800247e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002482:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	0d5b      	lsrs	r3, r3, #21
 800248e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <I2C_TransferConfig+0x60>)
 8002494:	430b      	orrs	r3, r1
 8002496:	43db      	mvns	r3, r3
 8002498:	ea02 0103 	and.w	r1, r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	03ff63ff 	.word	0x03ff63ff

080024b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00f      	beq.n	80024f2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80024d8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024e6:	2b28      	cmp	r3, #40	; 0x28
 80024e8:	d003      	beq.n	80024f2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80024f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00f      	beq.n	800251c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002502:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002510:	2b28      	cmp	r3, #40	; 0x28
 8002512:	d003      	beq.n	800251c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800251a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800251c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002520:	2b00      	cmp	r3, #0
 8002522:	da03      	bge.n	800252c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800252a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	2b10      	cmp	r3, #16
 8002530:	d103      	bne.n	800253a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002538:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	2b20      	cmp	r3, #32
 800253e:	d103      	bne.n	8002548 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f043 0320 	orr.w	r3, r3, #32
 8002546:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d103      	bne.n	8002556 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002554:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6819      	ldr	r1, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	d138      	bne.n	80025fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002594:	2302      	movs	r3, #2
 8002596:	e032      	b.n	80025fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b20      	cmp	r3, #32
 800261e:	d139      	bne.n	8002694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800262a:	2302      	movs	r3, #2
 800262c:	e033      	b.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2224      	movs	r2, #36	; 0x24
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800265c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d141      	bne.n	8002736 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026b2:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	d131      	bne.n	8002724 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c0:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c6:	4a46      	ldr	r2, [pc, #280]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d0:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026d8:	4a41      	ldr	r2, [pc, #260]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026e0:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2232      	movs	r2, #50	; 0x32
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	4a3f      	ldr	r2, [pc, #252]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	0c9b      	lsrs	r3, r3, #18
 80026f2:	3301      	adds	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f6:	e002      	b.n	80026fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270a:	d102      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f2      	bne.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002712:	4b33      	ldr	r3, [pc, #204]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d158      	bne.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e057      	b.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002724:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800272a:	4a2d      	ldr	r2, [pc, #180]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002730:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002734:	e04d      	b.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273c:	d141      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d131      	bne.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002752:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002764:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2232      	movs	r2, #50	; 0x32
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	0c9b      	lsrs	r3, r3, #18
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002782:	e002      	b.n	800278a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3b01      	subs	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002796:	d102      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f2      	bne.n	8002784 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d112      	bne.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e011      	b.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c0:	e007      	b.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ca:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	40007000 	.word	0x40007000
 80027e4:	20000000 	.word	0x20000000
 80027e8:	431bde83 	.word	0x431bde83

080027ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fa:	6093      	str	r3, [r2, #8]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40007000 	.word	0x40007000

0800280c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e306      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d075      	beq.n	8002916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282a:	4b97      	ldr	r3, [pc, #604]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002834:	4b94      	ldr	r3, [pc, #592]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d102      	bne.n	800284a <HAL_RCC_OscConfig+0x3e>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d002      	beq.n	8002850 <HAL_RCC_OscConfig+0x44>
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b8d      	ldr	r3, [pc, #564]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05b      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d157      	bne.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e2e1      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x74>
 8002872:	4b85      	ldr	r3, [pc, #532]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a84      	ldr	r2, [pc, #528]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7e      	ldr	r2, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b7c      	ldr	r3, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7b      	ldr	r2, [pc, #492]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 80028a4:	4b78      	ldr	r3, [pc, #480]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a77      	ldr	r2, [pc, #476]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b75      	ldr	r3, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a74      	ldr	r2, [pc, #464]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe f946 	bl	8000b54 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe f942 	bl	8000b54 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e2a6      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe f932 	bl	8000b54 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe f92e 	bl	8000b54 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e292      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002906:	4b60      	ldr	r3, [pc, #384]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d075      	beq.n	8002a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002922:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292c:	4b56      	ldr	r3, [pc, #344]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0x136>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d002      	beq.n	8002948 <HAL_RCC_OscConfig+0x13c>
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d11f      	bne.n	8002988 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002948:	4b4f      	ldr	r3, [pc, #316]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_OscConfig+0x154>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e265      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	061b      	lsls	r3, r3, #24
 800296e:	4946      	ldr	r1, [pc, #280]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002974:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe f89f 	bl	8000abc <HAL_InitTick>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d043      	beq.n	8002a0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e251      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d023      	beq.n	80029d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002990:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe f8da 	bl	8000b54 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe f8d6 	bl	8000b54 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e23a      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b6:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	061b      	lsls	r3, r3, #24
 80029d0:	492d      	ldr	r1, [pc, #180]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
 80029d6:	e01a      	b.n	8002a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 80029de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe f8b6 	bl	8000b54 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe f8b2 	bl	8000b54 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e216      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1e0>
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d041      	beq.n	8002a9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a28:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe f88f 	bl	8000b54 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe f88b 	bl	8000b54 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1ef      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ef      	beq.n	8002a3a <HAL_RCC_OscConfig+0x22e>
 8002a5a:	e020      	b.n	8002a9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe f872 	bl	8000b54 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a72:	e00d      	b.n	8002a90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fe f86e 	bl	8000b54 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d906      	bls.n	8002a90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1d2      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a90:	4b8c      	ldr	r3, [pc, #560]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1ea      	bne.n	8002a74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 80a6 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aac:	2300      	movs	r3, #0
 8002aae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ab0:	4b84      	ldr	r3, [pc, #528]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2b4>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4b7f      	ldr	r3, [pc, #508]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	4a7e      	ldr	r2, [pc, #504]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae2:	4b79      	ldr	r3, [pc, #484]	; (8002cc8 <HAL_RCC_OscConfig+0x4bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_RCC_OscConfig+0x4bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a75      	ldr	r2, [pc, #468]	; (8002cc8 <HAL_RCC_OscConfig+0x4bc>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fe f82b 	bl	8000b54 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe f827 	bl	8000b54 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e18b      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b14:	4b6c      	ldr	r3, [pc, #432]	; (8002cc8 <HAL_RCC_OscConfig+0x4bc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <HAL_RCC_OscConfig+0x32e>
 8002b28:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a65      	ldr	r2, [pc, #404]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b38:	e024      	b.n	8002b84 <HAL_RCC_OscConfig+0x378>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b05      	cmp	r3, #5
 8002b40:	d110      	bne.n	8002b64 <HAL_RCC_OscConfig+0x358>
 8002b42:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	4a5e      	ldr	r2, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b52:	4b5c      	ldr	r3, [pc, #368]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b62:	e00f      	b.n	8002b84 <HAL_RCC_OscConfig+0x378>
 8002b64:	4b57      	ldr	r3, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	4a56      	ldr	r2, [pc, #344]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d016      	beq.n	8002bba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fd ffe2 	bl	8000b54 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fd ffde 	bl	8000b54 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e140      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ed      	beq.n	8002b94 <HAL_RCC_OscConfig+0x388>
 8002bb8:	e015      	b.n	8002be6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fd ffcb 	bl	8000b54 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fd ffc7 	bl	8000b54 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e129      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd8:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ed      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bec:	4b35      	ldr	r3, [pc, #212]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d03c      	beq.n	8002c7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c12:	4a2c      	ldr	r2, [pc, #176]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fd ff9a 	bl	8000b54 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c24:	f7fd ff96 	bl	8000b54 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0fa      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ef      	beq.n	8002c24 <HAL_RCC_OscConfig+0x418>
 8002c44:	e01b      	b.n	8002c7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c46:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fd ff7d 	bl	8000b54 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c5e:	f7fd ff79 	bl	8000b54 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0dd      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ef      	bne.n	8002c5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80d1 	beq.w	8002e2a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	f000 808b 	beq.w	8002dac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d15e      	bne.n	8002d5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_RCC_OscConfig+0x4b8>)
 8002ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fd ff53 	bl	8000b54 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	e00c      	b.n	8002ccc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fd ff4f 	bl	8000b54 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d905      	bls.n	8002ccc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0b3      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ec      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd8:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6a11      	ldr	r1, [r2, #32]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce8:	3a01      	subs	r2, #1
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cf2:	0212      	lsls	r2, r2, #8
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cfa:	0852      	lsrs	r2, r2, #1
 8002cfc:	3a01      	subs	r2, #1
 8002cfe:	0552      	lsls	r2, r2, #21
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d06:	0852      	lsrs	r2, r2, #1
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	0652      	lsls	r2, r2, #25
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d12:	06d2      	lsls	r2, r2, #27
 8002d14:	430a      	orrs	r2, r1
 8002d16:	4947      	ldr	r1, [pc, #284]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b45      	ldr	r3, [pc, #276]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a44      	ldr	r2, [pc, #272]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d28:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a41      	ldr	r2, [pc, #260]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fd ff0e 	bl	8000b54 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fd ff0a 	bl	8000b54 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e06e      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4e:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x530>
 8002d5a:	e066      	b.n	8002e2a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a34      	ldr	r2, [pc, #208]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d68:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a31      	ldr	r2, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d74:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002d7a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fd fee6 	bl	8000b54 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fd fee2 	bl	8000b54 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e046      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9e:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x580>
 8002daa:	e03e      	b.n	8002e2a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e039      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002db8:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_RCC_OscConfig+0x628>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0203 	and.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d12c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d123      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d11b      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d113      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d109      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	019f800c 	.word	0x019f800c

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e11e      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b91      	ldr	r3, [pc, #580]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d910      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b8e      	ldr	r3, [pc, #568]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	498c      	ldr	r1, [pc, #560]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b8a      	ldr	r3, [pc, #552]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e106      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d073      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d129      	bne.n	8002eec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e98:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0f4      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ea8:	f000 f966 	bl	8003178 <RCC_GetSysClockFreqFromPLLSource>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4a7c      	ldr	r2, [pc, #496]	; (80030a4 <HAL_RCC_ClockConfig+0x268>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d93f      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d033      	beq.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d12f      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ede:	4a70      	ldr	r2, [pc, #448]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e024      	b.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0c6      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f04:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0be      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f14:	f000 f8ce 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4a61      	ldr	r2, [pc, #388]	; (80030a4 <HAL_RCC_ClockConfig+0x268>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d909      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f22:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f2a:	4a5d      	ldr	r2, [pc, #372]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b5a      	ldr	r3, [pc, #360]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4957      	ldr	r1, [pc, #348]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fd fe04 	bl	8000b54 <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fd fe00 	bl	8000b54 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e095      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fa8:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4936      	ldr	r1, [pc, #216]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
 8002fca:	e008      	b.n	8002fde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d105      	bne.n	8002fde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fd2:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4a32      	ldr	r2, [pc, #200]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d21d      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 020f 	bic.w	r2, r3, #15
 8002ff4:	4929      	ldr	r1, [pc, #164]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ffc:	f7fd fdaa 	bl	8000b54 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fd fda6 	bl	8000b54 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e03b      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d1ed      	bne.n	8003004 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4917      	ldr	r1, [pc, #92]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490f      	ldr	r1, [pc, #60]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003066:	f000 f825 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490c      	ldr	r1, [pc, #48]	; (80030a8 <HAL_RCC_ClockConfig+0x26c>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_RCC_ClockConfig+0x270>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fd16 	bl	8000abc <HAL_InitTick>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40022000 	.word	0x40022000
 80030a0:	40021000 	.word	0x40021000
 80030a4:	04c4b400 	.word	0x04c4b400
 80030a8:	08003a54 	.word	0x08003a54
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030ba:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d102      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c6:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e047      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d102      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e03e      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d136      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d10c      	bne.n	8003122 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003108:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc0>)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003112:	68d2      	ldr	r2, [r2, #12]
 8003114:	0a12      	lsrs	r2, r2, #8
 8003116:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	617b      	str	r3, [r7, #20]
      break;
 8003120:	e00c      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	0a12      	lsrs	r2, r2, #8
 8003130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
      break;
 800313a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0e5b      	lsrs	r3, r3, #25
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	3301      	adds	r3, #1
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e001      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800315c:	693b      	ldr	r3, [r7, #16]
}
 800315e:	4618      	mov	r0, r3
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200

08003178 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3301      	adds	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d10c      	bne.n	80031b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031a6:	68d2      	ldr	r2, [r2, #12]
 80031a8:	0a12      	lsrs	r2, r2, #8
 80031aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	617b      	str	r3, [r7, #20]
    break;
 80031b4:	e00c      	b.n	80031d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	0a12      	lsrs	r2, r2, #8
 80031c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031c8:	fb02 f303 	mul.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    break;
 80031ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0e5b      	lsrs	r3, r3, #25
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	3301      	adds	r3, #1
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031ea:	687b      	ldr	r3, [r7, #4]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40021000 	.word	0x40021000
 80031fc:	007a1200 	.word	0x007a1200
 8003200:	00f42400 	.word	0x00f42400

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800320c:	2300      	movs	r3, #0
 800320e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003210:	2300      	movs	r3, #0
 8003212:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8098 	beq.w	8003352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003226:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a3f      	ldr	r2, [pc, #252]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324a:	2301      	movs	r3, #1
 800324c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800324e:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a39      	ldr	r2, [pc, #228]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800325a:	f7fd fc7b 	bl	8000b54 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003260:	e009      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fd fc77 	bl	8000b54 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d902      	bls.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	74fb      	strb	r3, [r7, #19]
        break;
 8003274:	e005      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ef      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d159      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01e      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d019      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fd fc37 	bl	8000b54 <HAL_GetTick>
 80032e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e8:	e00b      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fd fc33 	bl	8000b54 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d902      	bls.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003300:	e006      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ec      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	4903      	ldr	r1, [pc, #12]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800332c:	e008      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	74bb      	strb	r3, [r7, #18]
 8003332:	e005      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003340:	7c7b      	ldrb	r3, [r7, #17]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003346:	4ba6      	ldr	r3, [pc, #664]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	4aa5      	ldr	r2, [pc, #660]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335e:	4ba0      	ldr	r3, [pc, #640]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f023 0203 	bic.w	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	499c      	ldr	r1, [pc, #624]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003380:	4b97      	ldr	r3, [pc, #604]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 020c 	bic.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4994      	ldr	r1, [pc, #592]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a2:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	498b      	ldr	r1, [pc, #556]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c4:	4b86      	ldr	r3, [pc, #536]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4983      	ldr	r1, [pc, #524]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033e6:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	497a      	ldr	r1, [pc, #488]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003408:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	4972      	ldr	r1, [pc, #456]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4969      	ldr	r1, [pc, #420]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800344c:	4b64      	ldr	r3, [pc, #400]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4961      	ldr	r1, [pc, #388]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800346e:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	4958      	ldr	r1, [pc, #352]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003490:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	4950      	ldr	r1, [pc, #320]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ae:	d105      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a4a      	ldr	r2, [pc, #296]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034c8:	4b45      	ldr	r3, [pc, #276]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	4942      	ldr	r1, [pc, #264]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e6:	d105      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a3c      	ldr	r2, [pc, #240]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4934      	ldr	r1, [pc, #208]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351e:	d105      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	4926      	ldr	r1, [pc, #152]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003556:	d105      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003562:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	4918      	ldr	r1, [pc, #96]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d015      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	490a      	ldr	r1, [pc, #40]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c6:	d105      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4d0d      	ldr	r5, [pc, #52]	; (800361c <__libc_init_array+0x38>)
 80035e8:	4c0d      	ldr	r4, [pc, #52]	; (8003620 <__libc_init_array+0x3c>)
 80035ea:	1b64      	subs	r4, r4, r5
 80035ec:	10a4      	asrs	r4, r4, #2
 80035ee:	2600      	movs	r6, #0
 80035f0:	42a6      	cmp	r6, r4
 80035f2:	d109      	bne.n	8003608 <__libc_init_array+0x24>
 80035f4:	4d0b      	ldr	r5, [pc, #44]	; (8003624 <__libc_init_array+0x40>)
 80035f6:	4c0c      	ldr	r4, [pc, #48]	; (8003628 <__libc_init_array+0x44>)
 80035f8:	f000 f820 	bl	800363c <_init>
 80035fc:	1b64      	subs	r4, r4, r5
 80035fe:	10a4      	asrs	r4, r4, #2
 8003600:	2600      	movs	r6, #0
 8003602:	42a6      	cmp	r6, r4
 8003604:	d105      	bne.n	8003612 <__libc_init_array+0x2e>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	f855 3b04 	ldr.w	r3, [r5], #4
 800360c:	4798      	blx	r3
 800360e:	3601      	adds	r6, #1
 8003610:	e7ee      	b.n	80035f0 <__libc_init_array+0xc>
 8003612:	f855 3b04 	ldr.w	r3, [r5], #4
 8003616:	4798      	blx	r3
 8003618:	3601      	adds	r6, #1
 800361a:	e7f2      	b.n	8003602 <__libc_init_array+0x1e>
 800361c:	08003a64 	.word	0x08003a64
 8003620:	08003a64 	.word	0x08003a64
 8003624:	08003a64 	.word	0x08003a64
 8003628:	08003a68 	.word	0x08003a68

0800362c <memset>:
 800362c:	4402      	add	r2, r0
 800362e:	4603      	mov	r3, r0
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	f803 1b01 	strb.w	r1, [r3], #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <_init>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	bf00      	nop
 8003640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003642:	bc08      	pop	{r3}
 8003644:	469e      	mov	lr, r3
 8003646:	4770      	bx	lr

08003648 <_fini>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr
